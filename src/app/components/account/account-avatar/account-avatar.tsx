import { memo } from 'react';

import { Box, CircleProps } from 'leather-styles/jsx';

import { DynamicColorCircle } from '@app/ui/components/dynamic-color-circle';

const getAvatarText = (name: string, index: number) => {
  // Returns a string with the account's ordinal number.
  //
  // Assumes that account names starting with "Account" have been autogenerated
  // by the app. This will probably break when the account has a BNS name
  // starting with "Account", although it's probably good enough for now.
  if (name.startsWith('Account')) return String(index + 1);

  // At the time of writing, Firefox does not yet support Segmenter. Avatar
  // text will default to the account's ordinal number.
  if (!Intl.Segmenter) {
    return String(index + 1);
  }

  // Displays the first grapheme of the account name in uppercase.
  //
  // Using graphemes allows proper handling of emojis and other characters
  // with multiple code points.
  return [...new Intl.Segmenter().segment(name)][0].segment.toUpperCase();
};

interface AccountAvatarProps extends CircleProps {
  name: string;
  publicKey: string;
  index: number;
}
export const AccountAvatar = memo(({ name, publicKey, index, ...props }: AccountAvatarProps) => {
  const gradient = publicKey + index.toString();
  const text = getAvatarText(name, index);

  return (
    <DynamicColorCircle sizeParam="48" value={gradient} {...props}>
      <Box position="absolute">{text}</Box>
    </DynamicColorCircle>
  );
});
