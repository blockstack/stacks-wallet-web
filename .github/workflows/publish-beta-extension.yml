name: Publish Beta Extensions
on:
  push:
    tags:
      - 'v*beta*'
  workflow_dispatch:

env:
  # To use another sentry DSN
  SENTRY_DSN: ${{ secrets.SENTRY_DSN }}

jobs:
  build-extension:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        id: cache-node-modules
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}-${{ hashFiles('**/package.json') }}

      - uses: actions/setup-node@v2
        with:
          node-version: 14.x

      - name: Install packages
        uses: ./.github/actions/provision
        if: steps.cache-node-modules.outputs.cache-hit != 'true'

      - name: Build project
        env:
          IS_PUBLISHING: true
        run: yarn build

      - uses: actions/upload-artifact@v2
        name: Upload build artifact
        with:
          name: hiro-wallet
          path: dist

  create-github-release:
    name: Create Github release
    runs-on: ubuntu-latest
    # is this necessary if the job only runs on tags?
    # if: startsWith(github.ref, 'refs/tags/v')
    needs:
      - build-extension
    outputs:
      publish_status: ${{ steps.publish-chrome.outputs.publish_status }}
    steps:
      - name: Download extension build
        uses: actions/download-artifact@v2
        with:
          path: .

      - run: ls -R
      # - name: Sign and Upload Production Chrome extension
      #   continue-on-error: true
      #   id: publish-chrome
      #   run: |
      #     yarn webstore upload --source stacks-wallet-chromium.zip --auto-publish
      #     echo "::set-output name=publish_status::${?}"
      #   env:
      #     EXTENSION_ID: ${{ secrets.CHROME_APP_ID }}
      #     CLIENT_ID: ${{ secrets.CHROME_CLIENT_ID }}
      #     CLIENT_SECRET: ${{ secrets.CHROME_CLIENT_SECRET }}
      #     REFRESH_TOKEN: ${{ secrets.CHROME_REFRESH_TOKEN }}
  # publish_firefox_extension:
  #   name: Publish Firefox extension
  #   runs-on: ubuntu-latest
  #   env:
  #     MINIFY_PRODUCTION_BUILD: true
  #   if: startsWith(github.ref, 'refs/tags/v')
  #   needs:
  #     - pre_run
  #   outputs:
  #     publish_status: ${{ steps.publish-firefox.outputs.publish_status }}
  #   steps:
  #     - name: Check out Git repository
  #       uses: actions/checkout@v2
  #     - uses: actions/cache@v2
  #       id: cache-node-modules
  #       with:
  #         path: '**/node_modules'
  #         key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}-${{ hashFiles('**/package.json') }}
  #     - uses: actions/setup-node@v2
  #       with:
  #         node-version: 14.x
  #     - name: Install packages
  #       uses: ./.github/actions/provision
  #       if: steps.cache-node-modules.outputs.cache-hit != 'true'
  #     - name: Build project
  #       env:
  #         IS_PUBLISHING: true
  #       run: yarn build
  #     - name: Build extension
  #       run: sh build-ext.sh
  #     - name: Sign and Upload Production Firefox extension
  #       continue-on-error: true
  #       id: publish-firefox
  #       run: |
  #         yarn web-ext-submit --channel=listed
  #         echo "::set-output name=publish_status::${?}"
  #       env:
  #         WEB_EXT_API_KEY: ${{ secrets.FIREFOX_API_KEY }}
  #         WEB_EXT_API_SECRET: ${{ secrets.FIREFOX_API_SECRET }}
  # post_run:
  #   runs-on: ubuntu-latest
  #   needs:
  #     - publish_chrome_extension
  #     - publish_firefox_extension
  #   steps:
  #     - name: Publish Statuses
  #       run: |
  #         echo "::warning::Firefox Publish Status: $([[ "${{ needs.publish_firefox_extension.outputs.publish_status }}" = "0" ]] && echo 'SUCCESS' || echo 'FAILED')"
  #         echo "::warning::Chrome Publish Status: $([[ "${{ needs.publish_chrome_extension.outputs.publish_status }}" = "0" ]] && echo 'SUCCESS' || echo 'FAILED')"
